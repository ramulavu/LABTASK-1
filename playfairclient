import socket

def generate_playfair_matrix(key):
    key = "".join(dict.fromkeys(key.replace("J", "I")))  # Remove duplicates
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    matrix = []

    for char in key + alphabet:
        if char not in matrix:
            matrix.append(char)

    return [matrix[i:i+5] for i in range(0, 25, 5)]

def find_position(matrix, char):
    for row in range(5):
        if char in matrix[row]:
            return row, matrix[row].index(char)

def playfair_encrypt(plaintext, matrix):
    plaintext = plaintext.upper().replace("J", "I").replace(" ", "")
    if len(plaintext) % 2 != 0:
        plaintext += "X"

    ciphertext = ""
    for i in range(0, len(plaintext), 2):
        a, b = plaintext[i], plaintext[i+1]
        row_a, col_a = find_position(matrix, a)
        row_b, col_b = find_position(matrix, b)

        if row_a == row_b:
            ciphertext += matrix[row_a][(col_a + 1) % 5] + matrix[row_b][(col_b + 1) % 5]
        elif col_a == col_b:
            ciphertext += matrix[(row_a + 1) % 5][col_a] + matrix[(row_b + 1) % 5][col_b]
        else:
            ciphertext += matrix[row_a][col_b] + matrix[row_b][col_a]

    return ciphertext

def playfair_decrypt(ciphertext, matrix):
    plaintext = ""
    for i in range(0, len(ciphertext), 2):
        a, b = ciphertext[i], ciphertext[i+1]
        row_a, col_a = find_position(matrix, a)
        row_b, col_b = find_position(matrix, b)

        if row_a == row_b:
            plaintext += matrix[row_a][(col_a - 1) % 5] + matrix[row_b][(col_b - 1) % 5]
        elif col_a == col_b:
            plaintext += matrix[(row_a - 1) % 5][col_a] + matrix[(row_b - 1) % 5][col_b]
        else:
            plaintext += matrix[row_a][col_b] + matrix[row_b][col_a]

    return plaintext

def start_client():
    host = "127.0.0.1"
    port = 12345
    key = "SECURITY"

    matrix = generate_playfair_matrix(key)

    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))

    print("ðŸ”’ Playfair Secure Chat: Connected to the server. Type 'exit' to quit.")

    while True:
        message = input("Client: ")
        encrypted_message = playfair_encrypt(message, matrix)
        client_socket.send(encrypted_message.encode())

        if message.lower() == "exit":
            break

        encrypted_response = client_socket.recv(1024).decode()
        decrypted_response = playfair_decrypt(encrypted_response, matrix)
        print(f"ðŸ”‘ Decrypted from Server: {decrypted_response}")

    client_socket.close()

if __name__ == "__main__":
    start_client()
